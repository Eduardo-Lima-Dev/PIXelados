generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String               @unique
  pixKey              String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  password            String
  expenseParticipants ExpenseParticipant[] @relation("UserExpenseParticipants")
  ownedHouses         House[]              @relation("HouseOwner")
  payments            Payment[]
  expenses            Expense[]            @relation("UserExpenses")
  houses              House[]              @relation("HouseMembers")
}

model House {
  id         Int       @id @default(autoincrement())
  ownerId    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  inviteCode String?   @unique
  name       String    @default("Nova Casa")
  uuid       String    @unique @default(uuid())
  owner      User      @relation("HouseOwner", fields: [ownerId], references: [id])
  expenses   Expense[]
  members    User[]    @relation("HouseMembers")
}

model Expense {
  id           Int                  @id @default(autoincrement())
  title        String
  description  String
  amount       Float
  date         DateTime
  category     String?
  status       String               @default("pending")
  recurring    Boolean              @default(false)
  recurrenceId String?              @default(dbgenerated("gen_random_uuid()"))
  houseId      Int
  createdById  Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  participants ExpenseParticipant[]
  payments     Payment[]
  createdBy    User                 @relation("UserExpenses", fields: [createdById], references: [id])
  house        House                @relation(fields: [houseId], references: [id])

  @@map("expenses")
}

model ExpenseParticipant {
  id        Int     @id @default(autoincrement())
  expenseId Int
  userId    Int
  amount    Decimal
  paid      Boolean @default(false)
  expense   Expense @relation(fields: [expenseId], references: [id])
  user      User    @relation("UserExpenseParticipants", fields: [userId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expenseId Int
  userId    Int
  expense   Expense  @relation(fields: [expenseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
