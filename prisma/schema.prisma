// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  pixKey        String?
  houses        House[]   @relation("HouseMembers")
  ownedHouses   House[]   @relation("HouseOwner")
  expenses      Expense[] @relation("UserExpenses")
  payments      Payment[]
  expenseParticipants ExpenseParticipant[] @relation("UserExpenseParticipants")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model House {
  id            Int       @id @default(autoincrement())
  name          String    @default("Nova Casa")
  inviteCode    String?   @unique
  uuid          String    @unique @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  owner         User      @relation("HouseOwner", fields: [ownerId], references: [id])
  ownerId       Int
  members       User[]    @relation("HouseMembers")
  expenses      Expense[]
}

model Expense {
  id            Int       @id @default(autoincrement())
  description   String
  amount        Float
  date          DateTime
  category      String?
  status        String   @default("pending")
  recurring     Boolean  @default(false)
  house         House     @relation(fields: [houseId], references: [id])
  houseId       Int
  createdById   Int
  createdBy     User      @relation("UserExpenses", fields: [createdById], references: [id])
  participants  ExpenseParticipant[]
  payments      Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ExpenseParticipant {
  id        Int     @id @default(autoincrement())
  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId Int
  user      User    @relation("UserExpenseParticipants", fields: [userId], references: [id])
  userId    Int
  amount    Decimal
  paid      Boolean @default(false)
}

model Payment {
  id          Int       @id @default(autoincrement())
  amount      Float
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expense     Expense   @relation(fields: [expenseId], references: [id])
  expenseId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

